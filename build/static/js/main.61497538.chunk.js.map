{"version":3,"sources":["assets/chevron.svg","components/Dropdown.jsx","assets/syndio-logo.svg","components/Header.jsx","components/Tab.jsx","components/TabMenu.jsx","components/DemographicStats.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Dropdown","props","_toggleOptionsVisible","setState","optionsVisible","state","_onSelectOption","selected","onSelectOption","defaultSelected","this","options","label","optionNodes","map","option","value","disabled","id","className","onClick","unshift","some","src","chevron","alt","_renderOptions","nextProps","prevState","React","Component","defaultProps","Header","groups","activeGroup","onUpdateGroup","history","useHistory","location","useLocation","groupOptions","group","_updateGroup","selectedValue","a","push","pathname","logo","Tab","active","onClickAction","TabMenu","_setActiveTab","activeTab","tabList","tabs","tab","activeContent","content","length","_renderTabs","_renderActiveContent","DemographicStats","data","statistic","minority","majority","URL_PATH","App","_getGroups","fetch","response","ok","_handleError","json","Array","isArray","_getGroupDemographics","groupId","demographicsData","urlParams","URLSearchParams","window","search","get","errorMsg","Object","keys","key","charAt","toUpperCase","slice","statKey","stats","_generateTabs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61497538.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/chevron.a9fab3e0.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport chevron from 'assets/chevron.svg';\r\n\r\nimport 'stylesheets/Dropdown.scss';\r\n\r\nconst propTypes = {\r\n    /** List of option objects to display in menu */\r\n    options: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            /** Label for visual display menu */\r\n            label: PropTypes.node.isRequired,\r\n            /** Value to pass in callback representing selected menu item */\r\n            value: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]).isRequired,\r\n            /** True if item should be disabled (unclickable) */\r\n            disabled: PropTypes.bool\r\n        })\r\n    ),\r\n    /** Default selected item when component first renders */\r\n    defaultSelected: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\r\n    /** Callback function to call when selecting item */\r\n    onSelectOption: PropTypes.func,\r\n    /** Optional unclickable menu item to display at top of menu as dropdown label */\r\n    label: PropTypes.string\r\n}\r\n\r\nconst defaultProps = {\r\n    onSelectOption: () => {}\r\n}\r\n\r\n/** Basic stateful Dropdown component */\r\nclass Dropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            optionsVisible: false,\r\n            selected: this.props.defaultSelected\r\n        };\r\n    };\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        //This is needed in case the defaultSelected prop is updated after the component has already rendered\r\n        if (nextProps.defaultSelected !== prevState.selected) {\r\n            return { selected: nextProps.defaultSelected };\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    _toggleOptionsVisible = () => {\r\n        this.setState({ optionsVisible: !this.state.optionsVisible });\r\n    };\r\n\r\n    _onSelectOption = (selected) => {\r\n        this.props.onSelectOption(this.state.selected);\r\n        this.setState({ selected, optionsVisible: !this.state.optionsVisible })\r\n    };\r\n\r\n    /** Render menu section of dropdown, visible only when toggle element is active */\r\n    _renderOptions() {\r\n        const { optionsVisible, selected } = this.state;\r\n        const { options, label } = this.props;\r\n        let optionNodes = options.map(option => {\r\n            return  (selected === option.value || option.disabled) \r\n                ? <li key={option.value} id={option.id} className=\"disabled\">{option.label}</li>\r\n                : <li key={option.value} id={option.id} onClick={() => this._onSelectOption(option.value)}>{option.label}</li>;\r\n        })\r\n\r\n        if (label) {\r\n            optionNodes.unshift(<li key=\"label-option\" className=\"labelOption\">{label}</li>);\r\n        }\r\n\r\n        return  optionsVisible ? (\r\n            <ul className=\"optionsList\">\r\n                { optionNodes }\r\n            </ul>\r\n        ) : null;\r\n    };\r\n\r\n    render() {\r\n        const { optionsVisible, selected } = this.state;\r\n        let label;\r\n        this.props.options.some(option => {\r\n            if (option.value === selected) {\r\n                label = option.label;\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div className=\"dropdown\">\r\n                <button \r\n                    className={`toggle ${optionsVisible ? 'active' : ''}`} \r\n                    id=\"dropdown-button\"\r\n                    onClick={this._toggleOptionsVisible}\r\n                >\r\n                    <span>{label}</span><img src={chevron} alt=\"\" />\r\n                </button>\r\n                { this._renderOptions() }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDropdown.propTypes = propTypes;\r\nDropdown.defaultProps = defaultProps\r\nexport default Dropdown;","export default __webpack_public_path__ + \"static/media/syndio-logo.05771d84.svg\";","import React from 'react';\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\nimport Dropdown from 'components/Dropdown';\r\nimport logo from 'assets/syndio-logo.svg';\r\n\r\nimport 'stylesheets/Header.scss';\r\n\r\nconst propTypes = {\r\n    /** List of group objects containing label (for visual display) and id */\r\n    groups: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            label: PropTypes.string.isRequired\r\n        })\r\n    ),\r\n    /** ID of active group to show as selected in dropdown menu on initial render */\r\n    activeGroup: PropTypes.string,\r\n    /** Callback function to call when updating active group */\r\n    onUpdateGroup: PropTypes.func\r\n}\r\n\r\n/**\r\n * Functional component representing page Header \r\n */\r\nconst Header = ({groups = [], activeGroup, onUpdateGroup}) => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const groupOptions = groups.map(group => {\r\n        return { label: group.label, value: group.id, id: group.id };\r\n    });\r\n\r\n    /** Calls onUpdateGroup callback and updates group query param in url with active group id  */\r\n    const _updateGroup = async (selectedValue) => {\r\n        if (onUpdateGroup && typeof onUpdateGroup === 'function') {\r\n            onUpdateGroup(selectedValue);\r\n        }\r\n\r\n        history.push(location.pathname + `?group=${selectedValue}`);\r\n    };\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <img className=\"logo\" src={logo} alt=\"Syndio\" />\r\n            <Dropdown\r\n                options={groupOptions}\r\n                defaultSelected={activeGroup}\r\n                onSelectOption={_updateGroup}\r\n                label=\"CHANGE GROUP\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nHeader.propTypes = propTypes;\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport 'stylesheets/Tab.scss';\r\n\r\nconst propTypes = {\r\n    /** Label for visual display */\r\n    label: PropTypes.node,\r\n    /** Value representing tab to pass with callback function */\r\n    id: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]).isRequired,\r\n    /** True only if tab is active (intended use implies respective content for tab is visible) */\r\n    active: PropTypes.bool,\r\n    /** Callback function to call when tab is clicked */\r\n    onClickAction: PropTypes.func\r\n}\r\n\r\n/** Basic functional Tab component representing a single tab item */\r\nconst Tab = ({label, id, active = false, onClickAction}) => {\r\n    let className = 'tab';\r\n    className += active ? ' tab-active' : ' tab-inactive';\r\n\r\n    const _onClickAction = () => {\r\n        if (onClickAction && typeof onClickAction === 'function') {\r\n            onClickAction(id);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <button \r\n            className={className}\r\n            onClick={_onClickAction}\r\n        >\r\n            {label}\r\n        </button>\r\n    )\r\n}\r\n\r\nTab.propTypes = propTypes;\r\nexport default Tab;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Tab from 'components/Tab';\r\n\r\nimport 'stylesheets/TabMenu.scss';\r\n\r\nconst propTypes = {\r\n    /** List of tab objects containing label and id for Tab component as well as content to display when visible  */\r\n    tabs: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            label: PropTypes.node.isRequired,\r\n            id: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]).isRequired,\r\n            content: PropTypes.node\r\n        }).isRequired\r\n    ),\r\n    /** Default active tab for initial page render */\r\n    activeTab: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ])\r\n}\r\n\r\n/** Stateful component for a TabMenu containing tab list and tab content */\r\nclass TabMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeTab: props.activeTab\r\n        };\r\n    };\r\n\r\n    _setActiveTab = (id) => {\r\n        this.setState({ activeTab: id });\r\n    };\r\n\r\n    /**\r\n     * Render list of clickable tabs \r\n     */\r\n    _renderTabs() {\r\n        const tabList =  this.props.tabs\r\n            ? this.props.tabs.map( tab => {\r\n                const activeTab = this.state.activeTab || this.props.tabs[0].id;\r\n\r\n                 return (\r\n                    <li key={`tab-${tab.id}`} id={`tab-${tab.id}`} >\r\n                        <Tab\r\n                            label={tab.label}\r\n                            id={tab.id}\r\n                            onClickAction={this._setActiveTab}\r\n                            active={tab.id === activeTab}\r\n                        />\r\n                    </li>\r\n                 );\r\n            })\r\n            : null;\r\n\r\n        return <ul className=\"tabList\">{tabList}</ul>;\r\n    };\r\n\r\n    /**\r\n     * Render content of currently active tab only\r\n     */\r\n    _renderActiveContent() {\r\n        const { tabs } = this.props;\r\n        let activeContent = null;\r\n        \r\n        tabs.some(tab => {\r\n            if (tab.id === 0) {\r\n                activeContent = tab.content;\r\n            }\r\n        });\r\n\r\n        if (!activeContent && tabs.length) {\r\n            activeContent = tabs[0].content;\r\n        }\r\n\r\n        return activeContent ? (\r\n            <div className=\"content\">\r\n                {activeContent}\r\n            </div>\r\n        ) : null;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tabMenu\">\r\n               { this._renderTabs() }\r\n               { this._renderActiveContent() }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTabMenu.propTypes = propTypes;\r\nexport default TabMenu;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport 'stylesheets/DemographicStats.scss';\r\n\r\nconst propTypes = {\r\n    /** Key representing demographic category */\r\n    id: PropTypes.oneOf([ 'payEquityGap', 'employeeComparison', 'budget' ]),\r\n    /** Label to display on card */\r\n    label: PropTypes.string.isRequired,\r\n    /** Flexible data object containing demographic statistics */\r\n    data: PropTypes.object.isRequired,\r\n}\r\n\r\n/** Functional Component that displays demographic statistics in a card */\r\nconst DemographicStats = ({id, label, data = {}}) => {\r\n    let statistic = null;\r\n\r\n    switch(id) {\r\n        case 'payEquityGap':\r\n            const minority = data.minority || {};\r\n            const majority = data.majority || {};\r\n            statistic = <p>{minority.label} earn <strong>{minority.value}</strong> for every <strong>{majority.value}</strong> earned by comparable {majority.label}</p>;\r\n            break;\r\n        case 'employeeComparison':\r\n            statistic = <p>{data.label} make up <strong>{data.value}</strong> of employees</p>;\r\n            break;\r\n        case 'budget':\r\n            statistic = <p><strong>{data.value}</strong> minimum recommended budget to reduce pay equity gap</p>;\r\n            break;\r\n        default:\r\n            //None\r\n    }\r\n    \r\n    return (\r\n        <div className=\"demographicStats\" id={id}>\r\n            <label>{label}</label>\r\n            { statistic }\r\n        </div>\r\n    );\r\n}\r\n\r\nDemographicStats.propTypes = propTypes;\r\nexport default DemographicStats;","import React from \"react\";\r\nimport Header from 'components/Header';\r\nimport TabMenu from 'components/TabMenu';\r\nimport DemographicStats from 'components/DemographicStats';\r\n\r\nimport './App.scss';\r\n\r\nconst URL_PATH = 'https://run.mocky.io/v3/';\r\nconst GROUPS_PATH_VAR = '9e343425-c47c-4c7f-a1ac-972c099be0ed';\r\n\r\n/**\r\n * Top level stateful component that manages state for entire page and makes RESTful API requests\r\n */\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    \r\n    this.state = {\r\n      groups: [],\r\n      demographicsData: {},\r\n      activeGroup: urlParams.get('group') ? urlParams.get('group') : '',\r\n      errorMsg: null\r\n    };\r\n  };\r\n\r\n  componentDidMount() {\r\n    this._getGroups();\r\n  };\r\n\r\n  /**\r\n   * Get list of groups\r\n   */\r\n  _getGroups = async () => {\r\n    try {\r\n      const response = await fetch(URL_PATH + GROUPS_PATH_VAR);\r\n      if (!response.ok) {\r\n        this._handleError(); \r\n        return;\r\n      }\r\n  \r\n      const groups = await response.json();\r\n      \r\n      if (Array.isArray(groups)) {\r\n        const activeGroup =  this.state.activeGroup ? this.state.activeGroup : groups[0].id;\r\n  \r\n        this.setState({ groups, activeGroup }, () => this._getGroupDemographics(activeGroup));\r\n      } else {\r\n        this._handleError();\r\n      }\r\n    } catch (error) {\r\n      this._handleError(); \r\n    }\r\n    \r\n  };\r\n\r\n  /**\r\n   * Get all demographic data for specific group\r\n   * \r\n   * @param {string} groupId\r\n   */\r\n  _getGroupDemographics = async (groupId) => {\r\n    try {\r\n      const response = await fetch(URL_PATH + groupId);\r\n      if (!response.ok) {\r\n        this._handleError(); \r\n        return;\r\n      }\r\n  \r\n      const json = await response.json();\r\n      const demographicsData = json.data || {};\r\n  \r\n      this.setState({ demographicsData, activeGroup: groupId });\r\n    } catch (error) {\r\n      this._handleError(); \r\n    }\r\n    \r\n  };\r\n\r\n  _handleError() {\r\n    this.setState({ errorMsg: 'Error retrieving requested demographic statistics.'})\r\n  };\r\n\r\n  /**\r\n   * Generate list of tab objects with respective content from the demographicsData to provide to TabMenu\r\n   */\r\n  _generateTabs() {\r\n    const { demographicsData } = this.state;\r\n\r\n    const tabs = Object.keys(demographicsData).map(key =>{\r\n      const tab = { id: key, label: key.charAt(0).toUpperCase() + key.slice(1) };\r\n\r\n      tab.content = (\r\n        <div className=\"demographicsTab\">\r\n          {\r\n            Object.keys(demographicsData[key]).map(statKey => {\r\n              const stats = demographicsData[key][statKey];\r\n\r\n              return (\r\n                <DemographicStats\r\n                  id={statKey}\r\n                  label={stats.label}\r\n                  data={stats.data || {}}\r\n                  key={statKey}\r\n                />\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n      )\r\n\r\n      return tab;\r\n    });\r\n    \r\n    return tabs;\r\n  };\r\n\r\n  render() {\r\n    const { errorMsg } = this.state;\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <Header \r\n          groups={this.state.groups}\r\n          onUpdateGroup={this._getGroupDemographics}\r\n          activeGroup={this.state.activeGroup}\r\n        />\r\n        { errorMsg\r\n          ? <div className=\"error\">{errorMsg}</div>\r\n          : <TabMenu \r\n              tabs={this._generateTabs()}\r\n            />\r\n        }\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  BrowserRouter as Router\r\n} from \"react-router-dom\";\r\n\r\nimport 'index.css';\r\nimport App from 'App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}